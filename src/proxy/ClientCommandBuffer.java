/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proxy;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.SocketChannel;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author haha
 */
public class ClientCommandBuffer {

    private final SelectionKey client_key;
    private ByteBuffer buffer;
    private List<ClientCommandHandler> command_buffer;

    public ClientCommandBuffer(SelectionKey key) {
        this.client_key = key;
        command_buffer = new ArrayList<>();
        buffer = ByteBuffer.allocate(512);
    }

    public void receiveData() {
        try {
            ((SocketChannel) client_key.channel()).read(buffer);
            generateCommands();
        } catch (IOException ex) {
            Logger.getLogger(ClientCommandBuffer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void generateCommands() {
        String contents = new String(this.buffer.array());
        System.out.println("raw command string: " + contents);

        StringTokenizer split_commands = new StringTokenizer(contents, "\n");
        while (split_commands.hasMoreTokens()) {
            String command = split_commands.nextToken();
            //we have a new line in the buffer so we should have a complete
            //command. Try to generate a command from it.    
            try {
                ClientCommandHandler client_command = new ClientCommandHandler(command.trim());
                client_command.setClient_key(client_key);
                command_buffer.add(client_command);
            } catch (InvalidTargetException ex) {
                Logger.getLogger(ClientCommandBuffer.class.getName()).log(Level.WARNING, "Check the command generated by your client", ex);
            }
        }

        //we need to advance the buffer to where the last index of new line is
        //with compact, we keep any incomplete command contents.
        int last_index = contents.lastIndexOf('\n');
        int last_index_r = contents.lastIndexOf('\r');
        if (last_index_r > last_index) {
            last_index = last_index_r;
        }

        if (last_index > 0) {
            this.buffer.position(last_index);
            this.buffer.compact();
            this.buffer.position(0);
        }
    }

    List<ClientCommandHandler> getCommands() {
        List<ClientCommandHandler> commands = command_buffer;
        command_buffer = new ArrayList<>();
        return commands;
    }
}
